package com.avst.equipmentcontrol.outside.dealoutinterface.tts.avsttts.util;import com.avst.equipmentcontrol.common.util.LogUtil;import com.avst.equipmentcontrol.common.util.XMLUtil;import com.avst.equipmentcontrol.outside.dealoutinterface.tts.avsttts.util.param.Str2TtsXml;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.HttpStatus;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.methods.RequestEntity;import org.apache.commons.httpclient.methods.StringRequestEntity;import java.io.IOException;import java.io.InputStream;import java.text.SimpleDateFormat;import java.util.Date;public class TTSUtil {	private static String URL = "http://192.168.19.241:8880/tts/SynthText";	private static String app_key = "ac5d5452";	private static String lang_speaker_domain = "cn_xumengjuan_common";	private static String cap_key = "tts.cloud.synth";	private static String dev_key = "developer_key";		public static boolean tts(String text,String asrurl,String app_key_,String lang_speaker_domain_,String cap_key_,String dev_key_,String wavpath) {		// TODO Auto-generated method stub        LogUtil.intoLog(1,TTSUtil.class,"------开始tts识别,text:"+text);		if(null!=asrurl&&!asrurl.trim().equals("")){			URL=asrurl;		}		System.out.println(text+","+asrurl+","+app_key_+","+lang_speaker_domain_+","+cap_key_+","+dev_key_+","+wavpath);		if(null!=app_key_&&!app_key_.trim().equals("")){			app_key=app_key_;		}		if(null!=lang_speaker_domain_&&!lang_speaker_domain_.trim().equals("")){			lang_speaker_domain=lang_speaker_domain_;		}		if(null!=cap_key_&&!cap_key_.trim().equals("")){			cap_key=cap_key_;		}		if(null!=dev_key_&&!dev_key_.trim().equals("")){			dev_key=dev_key_;		}				HttpClient client = new HttpClient();        LogUtil.intoLog(1,TTSUtil.class,"-----tts URL"+URL);		PostMethod myPost = new PostMethod(URL);		InputStream txtis=null;		try {			myPost.setRequestHeader("charset", "utf-8");			myPost.setRequestHeader("x-app-key", app_key);				myPost.setRequestHeader("x-sdk-version", "3.9");			String date = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date());			myPost.setRequestHeader("x-request-date", date);				myPost.setRequestHeader("x-task-config", "capkey=" + cap_key + ",property="+lang_speaker_domain+",audioformat=auto,speed=4");			String str = date + dev_key;			myPost.setRequestHeader("x-session-key", MD5.getMD5(str.getBytes()));			myPost.setRequestHeader("x-udid", "101:1234567890");						RequestEntity entity = new StringRequestEntity(new String(text.getBytes(),"utf-8"));			myPost.setRequestEntity(entity);			int statusCode = client.executeMethod(myPost);			String.format("%d", statusCode);			System.out.println(statusCode);			if (statusCode == HttpStatus.SC_OK) {				txtis= myPost.getResponseBodyAsStream();				long length=myPost.getResponseContentLength();				if(0==length){					LogUtil.intoLog(4,TTSUtil.class,"第三方tts请求失败，length："+length);					return false;				}				// 得到请求消息的数据输入流				byte[] dataOrigin = new byte[1024];		        int off=0; 		        boolean bool=true;		        String xml="";		        while(bool){		        	txtis.read(dataOrigin, off, 1);		        	off+=1;		        	xml=new String(dataOrigin);		        	if(xml.indexOf("</ResponseInfo>") > -1){//结束标记符		        		bool=false;		        	}		        }				Str2TtsXml xmlobj=new Str2TtsXml();				xmlobj=(Str2TtsXml) XMLUtil.xmlToStr(xmlobj,xml);				if(null!=xmlobj&&xmlobj.getResCode().equals("Success")){					return WAVUtil.writeFile(txtis, wavpath);				}else{					LogUtil.intoLog(4,TTSUtil.class,"tts文字转语音失败，xml："+xml);				}			}		} catch (Exception e) {			e.printStackTrace();		}finally{			try {				txtis.close();			} catch (IOException e) {				e.printStackTrace();			}		}		return false;			}	public static void main(String[] args) {						boolean b =tts("祝愿我的祖国繁荣昌盛",null,null,null,null,null,"I:\\wubin\\笔录管理系统\\ceshi.wav");		try {			System.out.println(b+":----");		} catch (Exception e) {			e.printStackTrace();		}	}		}